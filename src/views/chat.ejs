<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="style.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />
    <title>Chat</title>
</head>

<body class="bSidebar d-flex align-items-center py-4 bg-body-tertiary">
    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar">
            <form action="/timeline" method="get">
                <button class="sidebarButton"> <span class="material-symbols-outlined">home</span> Home</button>
            </form>
            <form action="/profile" method="get">
                <button class="sidebarButton"> <span class="material-symbols-outlined">person</span> Profile</button>
            </form>
            <form action="/search" method="get">
                <button class="sidebarButton"><span class="material-symbols-outlined">search</span> Search</button>
            </form>
            <form action="/chat" method="get">
                <button class="sidebarButton active"><span class="material-symbols-outlined">chat</span> Chat</button>
            </form>
            <form action="/login" method="get">
                <button class="sidebarButton"><span class="material-symbols-outlined">logout</span> Logout</button>
            </form>
        </div>

        <!-- Chat Section (Central Div) -->
        <div class="feed">
            <div class="feed_header">
                <h2>Chat</h2>
                <h5>Converse com seus amigos!</h5>
            </div>

            <!-- Mensagem inicial -->
            <div id="startMessage" class="text-center my-5">
                <h3>Selecione alguém online para iniciar uma conversa</h3>
            </div>

            <!-- Chat messages (escondido inicialmente) -->
            <div id="chatSection" class="chat_section d-none">
                <div id="chatWindow" class="chat_window">
                    <!-- As mensagens do chat vão aparecer aqui -->
                </div>

                <!-- Chat Input -->
                <div class="inputPost">
                    <form action="/chat/send" method="post" id="chatForm">
                        <input type="text" class="form-control" id="message" name="message"
                            placeholder="Digite sua mensagem..." required>
                        <button type="submit" class="postBox_post">Enviar</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Right Sidebar: Users Online -->
        <div class="users_sidebar">
            <div class="feed_header">
                <h3>Usuários Online</h3>
            </div>
            <ul class="users_list">
                <!-- A lista de usuários online será adicionada aqui -->
            </ul>
            <div class="users_all">
                <h3>Todos os Usuários</h3>
                <ul class="all_users_list"></ul>
            </div>
        </div>
    </div>

    <script>
        const socket = new WebSocket('ws://localhost:3357');
        let selectedUserId = null;
    
        // Mostrar a seção do chat
        function showChatSection() {
            document.getElementById("startMessage").classList.add("d-none");
            document.getElementById("chatSection").classList.remove("d-none");
        }
    
        // Enviar login quando a conexão WebSocket é aberta
        socket.onopen = () => {
            const currentUserId = <%= userId %>; // ID do usuário logado vindo do servidor
            socket.send(JSON.stringify({ type: "login", userId: currentUserId }));
        };
    
        document.getElementById('chatForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const messageInput = document.getElementById('message');
            const messageText = messageInput.value.trim();

            if (messageText && selectedUserId) {
                const timestamp = new Date().toISOString(); // Gerar o timestamp no formato ISO

                const messageData = {
                    type: "message",
                    userId: <%= userId %>, // ID do usuário logado
                    chatId: currentChatId,
                    receiverId: selectedUserId, // ID do destinatário
                    message: messageText,
                    timestamp: timestamp
                };

                // Enviar a mensagem via WebSocket
                socket.send(JSON.stringify(messageData));

                // Adicionar mensagem localmente como enviada
                appendMessageToChatWindow("Você", messageData.message, true, timestamp);

                // Limpar o campo de texto
                messageInput.value = '';
            }
        });

    
        socket.onmessage = function (event) {
            const messageData = JSON.parse(event.data);

            if (messageData.type === "chat_history") {
                // Exibir histórico de mensagens
                const chatWindow = document.getElementById('chatWindow');
                chatWindow.innerHTML = ''; // Limpar a janela do chat
                currentChatId = messageData.chatId;

                // Processar cada mensagem do histórico
                messageData.messages.forEach(msg => {
                    appendMessageToChatWindow(
                        msg.id_sender === <%= userId %> ? "Você" : msg.senderName || "Desconhecido", // Determina o nome
                        msg.message,
                        msg.id_sender === <%= userId %>, 
                        msg.sending_time,
                        
                    );
                });
            } else if (messageData.type === "message") {
                // Adicionar mensagens em tempo real
                const isSentByCurrentUser = messageData.userId === <%= userId %>;
                appendMessageToChatWindow(
                    isSentByCurrentUser ? "Você" : messageData.senderName || "Desconhecido",
                    messageData.message,
                    isSentByCurrentUser,
                    messageData.timestamp
                );
            }
        };

    
        // Atualizar lista de usuários online
        function fetchUsersOnline() {
            fetch('/users-online')
                .then(response => response.json())
                .then(users => {
                    const usersList = document.querySelector('.users_list');
                    usersList.innerHTML = '';
    
                    users.forEach(user => {
                        const userItem = document.createElement('li');
                        userItem.textContent = user.user_name;
                        userItem.classList.add('user_item');
                        userItem.dataset.userId = user.id_user;
    
                        // Adicionar evento de clique para iniciar ou acessar chat
                        userItem.addEventListener('click', () => {
                            selectedUserId = user.id_user;
                            showChatSection();
    
                            // Enviar solicitação para iniciar ou acessar o chat
                            socket.send(JSON.stringify({
                                type: "start_chat",
                                userId: <%= userId %>, // ID do usuário logado
                                otherUserId: selectedUserId // ID do usuário selecionado
                            }));
                        });
    
                        usersList.appendChild(userItem);
                    });
                })
                .catch(error => console.error('Erro ao buscar usuários online:', error));
        }
        // Atualizar lista de usuários online periodicamente
        setInterval(fetchUsersOnline, 1000); 
        fetchUsersOnline();

        function fetchAllUsers() {
            fetch('/all-users')
                .then(response => response.json())
                .then(users => {
                    const allUsersList = document.querySelector('.all_users_list');
                    allUsersList.innerHTML = '';

                    users.forEach(user => {
                        const userItem = document.createElement('li');
                        userItem.textContent = user.user_name;
                        userItem.classList.add('user_item');
                        userItem.dataset.userId = user.id_user;

                        // Adicionar evento de clique para iniciar ou acessar chat
                        userItem.addEventListener('click', () => {
                            selectedUserId = user.id_user;
                            showChatSection();

                            // Enviar solicitação para iniciar ou acessar o chat
                            socket.send(JSON.stringify({
                                type: "start_chat",
                                userId: <%= userId %>, // ID do usuário logado
                                otherUserId: selectedUserId // ID do usuário selecionado
                            }));
                        });

                        allUsersList.appendChild(userItem);
                    });
                })
                .catch(error => console.error('Erro ao buscar todos os usuários:', error));
        }


        document.addEventListener('DOMContentLoaded', () => {
            fetchUsersOnline();
            fetchAllUsers();
        });

        // Atualizar lista de usuários existentes periodicamente
        setInterval(fetchAllUsers, 30000); // Atualiza a cada 30 segundos

    
        // Função para adicionar mensagens à janela do chat
        function appendMessageToChatWindow(user, message, isSentByCurrentUser, timestamp) {
            const chatWindow = document.getElementById('chatWindow');
            const messageWrapper = document.createElement('div'); // Wrapper para a mensagem e o horário

            // Adicionar mensagem
            const messageElement = document.createElement('div');
            messageElement.textContent = `${user}: ${message}`;
            messageElement.classList.add('message');

            // Adicionar classes para alinhamento
            if (isSentByCurrentUser) {
                messageElement.classList.add('sent');
            } else {
                messageElement.classList.add('received');
            }

            // Adicionar horário
            const timestampElement = document.createElement('small');
            timestampElement.textContent = formatTimestamp(timestamp); // Formata a data e a hora
            timestampElement.classList.add('timestamp');

            // Adicionar os elementos ao wrapper
            messageWrapper.appendChild(messageElement);
            messageWrapper.appendChild(timestampElement);
            messageWrapper.classList.add('message-wrapper');

            // Adicionar o wrapper à janela do chat
            chatWindow.appendChild(messageWrapper);

            // Rolar o chat para mostrar a mensagem mais recente
            chatWindow.scrollTop = chatWindow.scrollHeight;
        }

        function formatTimestamp(timestamp) {
            const date = new Date(timestamp);
            const options = {
                day: "2-digit",
                month: "2-digit",
                year: "numeric",
                hour: "2-digit",
                minute: "2-digit"
            };
            return date.toLocaleString("pt-BR", options); // Formata para DD/MM/AAAA HH:MM
        }

    </script>
    
    

</body>

</html>